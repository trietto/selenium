load("//common:defs.bzl", "copy_file")
load("@d2l_rules_csharp//csharp:defs.bzl", "csharp_library")
load(
    "//dotnet:defs.bzl",
    "generated_assembly_info",
    "nuget_package",
    "nuget_push",
)
load(
    "//dotnet:selenium-dotnet-version.bzl",
    "ASSEMBLY_COMPANY",
    "ASSEMBLY_COPYRIGHT",
    "ASSEMBLY_INFORMATIONAL_VERSION",
    "ASSEMBLY_PRODUCT",
    "ASSEMBLY_VERSION",
    "SE_VERSION",
    "SUPPORTED_NET_FRAMEWORKS",
    "SUPPORTED_NET_STANDARD_VERSIONS",
)

generated_assembly_info(
    name = "assembly-info",
    company = ASSEMBLY_COMPANY,
    copyright = ASSEMBLY_COPYRIGHT,
    description = "Selenium WebDriver .NET Bindings support classes",
    informational_version = ASSEMBLY_INFORMATIONAL_VERSION,
    product = ASSEMBLY_PRODUCT,
    title = "Selenium WebDriver Support",
    version = ASSEMBLY_VERSION,
)

[csharp_library(
    name = "{}".format(framework),
    srcs = glob([
        "*.cs",
        "Events/*.cs",
        "Extensions/*.cs",
        "PageObjects/**/*.cs",
        "UI/*.cs",
    ]) + [":assembly-info"],
    out = "WebDriver.Support",
    target_frameworks = [
        "{}".format(framework),
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@net//:System",
        "@net//:System.Core",
        "@net//:System.Data",
        "@net//:System.Drawing",
        "@net//:System.Xml",
        "//dotnet/src/webdriver:{}".format(framework),
    ],
) for framework in SUPPORTED_NET_FRAMEWORKS]

[csharp_library(
    name = "{}".format(standard_version),
    srcs = glob([
        "*.cs",
        "Events/*.cs",
        "Extensions/*.cs",
        "PageObjects/**/*.cs",
        "UI/*.cs",
    ]) + [":assembly-info"],
    out = "WebDriver.Support",
    target_frameworks = [
        "{}".format(standard_version),
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//dotnet/src/webdriver:{}".format(standard_version),
    ],
) for standard_version in SUPPORTED_NET_STANDARD_VERSIONS]

[csharp_library(
    name = "{}-strongnamed".format(framework),
    srcs = glob([
        "*.cs",
        "Events/*.cs",
        "Extensions/*.cs",
        "PageObjects/**/*.cs",
        "UI/*.cs",
    ]) + [":assembly-info"],
    out = "strongnamed/WebDriver.Support",
    keyfile = "//dotnet:WebDriver.snk",
    target_frameworks = [
        "{}".format(framework),
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@net//:System",
        "@net//:System.Core",
        "@net//:System.Data",
        "@net//:System.Drawing",
        "@net//:System.Xml",
        "//dotnet/src/webdriver:{}-strongnamed".format(framework),
    ],
) for framework in SUPPORTED_NET_FRAMEWORKS]

[csharp_library(
    name = "{}-strongnamed".format(standard_version),
    srcs = glob([
        "*.cs",
        "Events/*.cs",
        "Extensions/*.cs",
        "PageObjects/**/*.cs",
        "UI/*.cs",
    ]) + [":assembly-info"],
    out = "strongnamed/WebDriver.Support",
    keyfile = "//dotnet:WebDriver.snk",
    target_frameworks = [
        "{}".format(standard_version),
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//dotnet/src/webdriver:{}-strongnamed".format(standard_version),
    ],
) for standard_version in SUPPORTED_NET_STANDARD_VERSIONS]

copy_file(
    name = "logo",
    src = "//common/images:selenium_logo_small.png",
    out = "icon.png",
)

nuget_package(
    name = "package",
    src = "WebDriver.Support.nuspec",
    create_symbol_package = True,
    is_windows = select({
        "@bazel_tools//src/conditions:host_windows": True,
        "//conditions:default": False,
    }),
    package_id = "Selenium.Support",
    package_version = "{}".format(SE_VERSION),
    deps = [
        ":logo",
        ":net45",
        ":net46",
        ":net47",
        ":net48",
        ":net5.0",
        ":netstandard2.0",
        ":netstandard2.1",
    ],
)

nuget_package(
    name = "package-strongnamed",
    src = "WebDriver.Support.nuspec",
    is_windows = select({
        "@bazel_tools//src/conditions:host_windows": True,
        "//conditions:default": False,
    }),
    package_id = "Selenium.Support.StrongNamed",
    package_version = "{}".format(SE_VERSION),
    deps = [
        ":logo",
        ":net45-strongnamed",
        ":net46-strongnamed",
        ":net47-strongnamed",
        ":net48-strongnamed",
        ":net5.0-strongnamed",
        ":netstandard2.0-strongnamed",
        ":netstandard2.1-strongnamed",
    ],
)

nuget_push(
    name = "publish",
    src = ":package",
    api_key = "//dotnet:nuget-api-key",
)
